// ---------------------------------------------------------------------------

#ifndef BaconsCipherProcessorH
#define BaconsCipherProcessorH
#include <System.hpp>
#include <map>
using namespace std;
// ---------------------------------------------------------------------------

class BaconsCipher {
private: // спецификатор доступа private
		String gfd = "456";
	wchar_t str;

	String EncryptedMethod1(String);
	String EncryptedMethod2(String);
	String EncryptedMethod3(String);
	String EncryptedMethod4(String);

	String DecryptedMethod1(String);
	String DecryptedMethod2(String);
	String DecryptedMethod3(String);
	String DecryptedMethod4(String);

	struct BaconsCipherEN {
		String key;
		String value;
	};

	// List<BaconsCipherEN> BaconsCipherENList
	map<String, String>mp;
	map<String, String>mpEN_D;
	map<String, String>mpRU_D;
	map<String, String>mpEN_E;
	map<String, String>mpRU_E;

public: // спецификатор доступа public
	BaconsCipher() {
		// mpEN_E
		mpEN_E["A"] = "abbbb";
		mpEN_E["B"] = "babbb";
		mpEN_E["C"] = "bbabb";
		mpEN_E["D"] = "abbab";
		mpEN_E["E"] = "babba";
		mpEN_E["F"] = "ababb";
		mpEN_E["G"] = "aabab";
		mpEN_E["H"] = "baaba";
		mpEN_E["I"] = "bbaab";
		mpEN_E["J"] = "abbaa";
		mpEN_E["K"] = "aabba";
		mpEN_E["L"] = "aaabb";
		mpEN_E["M"] = "aaaab";
		mpEN_E["N"] = "aaaaa";
		mpEN_E["O"] = "baaaa";
		mpEN_E["P"] = "bbaaa";
		mpEN_E["Q"] = "bbbaa";
		mpEN_E["R"] = "abbba";
		mpEN_E["S"] = "aabbb";
		mpEN_E["T"] = "baabb";
		mpEN_E["U"] = "abaab";
		mpEN_E["V"] = "aabaa";
		mpEN_E["W"] = "aaaba";
		mpEN_E["X"] = "baaab";
		mpEN_E["Y"] = "abaaa";
		mpEN_E["Z"] = "babaa";
		// mpRU_E
		mpRU_E["А"] = "AAAAA";
		mpRU_E["Б"] = "AAAAB";
		mpRU_E["В"] = "AAABA";
		mpRU_E["Г"] = "AAABB";
		mpRU_E["Д"] = "AABAA";
		mpRU_E["Е"] = "AABAB";
		mpRU_E["Ж"] = "AABBA";
		mpRU_E["З"] = "AABBB";
		mpRU_E["И"] = "ABAAA";
		mpRU_E["Й"] = "ABAAB";
		mpRU_E["К"] = "ABABA";
		mpRU_E["Л"] = "ABABB";
		mpRU_E["М"] = "ABBAA";
		mpRU_E["Н"] = "ABBAB";
		mpRU_E["О"] = "ABBBA";
		mpRU_E["П"] = "ABBBB";
		mpRU_E["Р"] = "BAAAA";
		mpRU_E["С"] = "BAAAB";
		mpRU_E["Т"] = "BAABA";
		mpRU_E["У"] = "BAABB";
		mpRU_E["Ф"] = "BABAA";
		mpRU_E["Х"] = "BABAB";
		mpRU_E["Ц"] = "BABBA";
		mpRU_E["Ч"] = "BABBB";
		mpRU_E["Ш"] = "BBAAA";
		mpRU_E["Щ"] = "BBAAB";
		mpRU_E["Ъ"] = "BBABA";
		mpRU_E["Ы"] = "BBABB";
		mpRU_E["Ь"] = "BBBAA";
		mpRU_E["Э"] = "BBBAB";
		mpRU_E["Ю"] = "BBBBA";
		mpRU_E["Я"] = "BBBBB";
		EtoD(mpEN_E,mpEN_D);
		EtoD(mpRU_E,mpRU_D);
	}; // конструктор класса
	String Encrypted(String, int, int); //
	String Decrypted(String, int, int); //

	map<String, String> EtoD(map<String, String> mp_in, map<String, String> mp_out) {
		for (const auto&kv : mp_in) {
			mp_out[kv.second] = kv.first;
		}
		return mp_out;
	};
};

#endif
